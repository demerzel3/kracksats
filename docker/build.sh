#!/bin/bash
#
# ARG_OPTIONAL_BOOLEAN([release],[],[build release binaries])
# ARG_HELP([Build rust lambdas using docker])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

set -e

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}


begins_with_short_option()
{
    local first_option all_short_options='h'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_release="off"


print_help()
{
    printf '%s\n' "Build rust lambdas using docker"
    printf 'Usage: %s [--(no-)release] [-h|--help]\n' "$0"
    printf '\t%s\n' "--release, --no-release: build release binaries (off by default)"
    printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            --no-release|--release)
                _arg_release="on"
                test "${1:0:5}" = "--no-" && _arg_release="off"
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
                ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [ $_arg_release = "on" ]; then
    BUILD_COMMAND='
    cargo build --release &&
    for source in $(find target/release/ -maxdepth 1 -perm -111 -type f); do
        dest=lambdas-rust/dist/$(basename "${source}");
        mkdir -p ${dest};
        cp $source ${dest}/bootstrap;
        zip -j ${dest}.zip ${dest}/bootstrap;
    done
    ';
else
    BUILD_COMMAND='
    cargo build &&
    for source in $(find target/debug/ -maxdepth 1 -perm -111 -type f); do
        dest=lambdas-rust/dist/$(basename "${source}");
        mkdir -p ${dest};
        cp $source ${dest}/bootstrap;
    done
    ';
fi

docker run --rm -i \
    -v ${PWD}:/code \
    -v rust-lambda-builder-target:/code/target \
    -v cargo-registry:/root/.cargo/registry \
    -v cargo-git:/root/.cargo/git \
    rust-lambda-builder bash -c "${BUILD_COMMAND}"

# ] <-- needed because of Argbash
